<?php

/**
 * @file
 * Primary module hooks for DrupalEasy Repositories module.
 */

use Drupal\Core\Form\FormState;
use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;
use Drupal\drupaleasy_repositories\Event\UserLoginEvent;

/**
 * Implements hook_user_login().
 */
function drupaleasy_repositories_user_login($account) {
  $event = new UserLoginEvent($account);

  $event_dispatcher = Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(UserLoginEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_cron().
 */
function drupaleasy_repositories_cron() {
  // Update repository nodes once per day, only between 1am and 2am UTC.
  // Assumes cron runs every hour.
  // Gets the current UTC hour.
  $hour = time() / 3600 % 24;
  if ($hour == 1) {
    /** @var \Drupal\Core\Entity\EntityStorageInterface $user_storage */
    $user_storage = Drupal::service('entity_type.manager')->getStorage('user');
    $query = $user_storage->getQuery();
    $query->condition('status', '1');
    $users = $query->execute();

    // Create a Queue API item for each user.
    foreach ($users as $uid => $user) {
      $queue = Drupal::queue('drupaleasy_repositories_repository_node_updater');
      $queue->createItem(['uid' => $uid]);
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function drupaleasy_repositories_form_user_form_alter(&$form, $form_state, $form_id) {
  $form['#validate'][] = '_drupaleasy_repositories_user_form_validate';
  $form['actions']['submit']['#submit'][] = '_drupaleasy_repositories_user_form_submit';

  if (!empty($form['field_repository_url']['widget'])) {
    foreach (Element::children($form['field_repository_url']['widget']) as $el_index) {
      $form['field_repository_url']['widget'][$el_index]['#process'][] = '_drupaleasy_repositories_url_help_text';
    }
  }
}

/**
 * {@inheritdoc}
 */
function _drupaleasy_repositories_url_help_text(&$element, &$form_state, &$form) {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = Drupal::service('drupaleasy_repositories.service');
  $help_text = $repository_service->getValidatorHelpText();

  $element['uri']['#description'] = t('Valid URLs include: %help_text', ['%help_text' => $help_text]);
  $element['uri']['#description_display'] = 'before';
  return $element;
};

/**
 * Custom validation handler for user profile form.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _drupaleasy_repositories_user_form_validate(array $form, FormState &$form_state) {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = Drupal::service('drupaleasy_repositories.service');
  // Todo: Is this the best way to do this?
  $account = \Drupal::currentUser();
  $error = $repository_service->validateRepositoryUrls($form_state->getValue('field_repository_url'), $account->id());

  if ($error) {
    $form_state->setError(
      $form['field_repository_url'],
      $error,
    );
  }
}

/**
 * Custom submit handler for user profile form.
 *
 * @param array $form
 *   The form.
 * @param Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _drupaleasy_repositories_user_form_submit(array $form, FormState &$form_state) {
  /** @var \Drupal\drupaleasy_repositories\DrupaleasyRepositoriesService $repository_service */
  $repository_service = Drupal::service('drupaleasy_repositories.service');

  // Todo: Is this the best way to do this?
  $account = User::load($form_state->getValue('uid'));
  // Todo: What happens if it returns false? Error message?
  $repository_service->updateRepositories($account);
}
